From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Valerio Valerio <valerio.valerio@jollamobile.com>
Date: Wed, 29 May 2013 09:44:20 +0300
Subject: [PATCH] Accounts-qt integration.

Adjust sso credential plugin to use invalidation at the account
level. Also add Sailfish OS specific client id for OAuth2 method.

Change how service are reloaded when account changes.
---
 src/plugins/credentials/sso/plugin.cpp     | 123 +++++++++++++++++----
 src/plugins/credentials/sso/sso.pro        |   2 +-
 src/plugins/plugins.pro                    |   4 +
 src/tools/messageserver/servicehandler.cpp |  13 +++
 4 files changed, 119 insertions(+), 23 deletions(-)

diff --git a/src/plugins/credentials/sso/plugin.cpp b/src/plugins/credentials/sso/plugin.cpp
index de7f66b8..5cac25f9 100644
--- a/src/plugins/credentials/sso/plugin.cpp
+++ b/src/plugins/credentials/sso/plugin.cpp
@@ -42,6 +42,12 @@
 #include "plugin.h"
 #include "ssomanager.h"
 
+#include <Accounts/Manager>
+#include <Accounts/Account>
+#include <Accounts/AccountService>
+
+#include <sailfishkeyprovider.h>
+
 #include <qmaillog.h>
 #include <qmailaccountconfiguration.h>
 
@@ -51,6 +57,13 @@ public:
     SSOCredentials(QObject *parent = nullptr);
 
     bool init(const QMailServiceConfiguration &svcCfg) override;
+    bool isInvalidated() override;
+    void invalidate(const QString &source = QString()) override;
+
+private:
+    QString loadKey(const QString &provider, const QString &name, const char* key);
+
+    Accounts::Manager m_manager;
 };
 
 SSOCredentials::SSOCredentials(QObject *parent)
@@ -58,36 +71,102 @@ SSOCredentials::SSOCredentials(QObject *parent)
 {
 }
 
+QString SSOCredentials::loadKey(const QString &provider, const QString &name, const char* key)
+{
+    char *cValue = NULL;
+
+    int cSuccess = SailfishKeyProvider_storedKey(provider.toUtf8().constData(),
+                                                 name.toUtf8().constData(),
+                                                 key, &cValue);
+    if (!cValue) {
+        return QString();
+    } else if (cSuccess != 0) {
+        free(cValue);
+        return QString();
+    }
+
+    QString value = QString::fromLatin1(cValue);
+    free(cValue);
+
+    return value;
+}
+
 bool SSOCredentials::init(const QMailServiceConfiguration &svcCfg)
 {
     QMailCredentialsInterface::init(svcCfg);
 
-    uint credentialsId = svcCfg.value(QString::fromLatin1("CredentialsId")).toUInt();
-    QString method;
-    QString mechanism;
-    QVariantMap parameters;
-    QMailAccountConfiguration config(m_id);
-    const QMailAccountConfiguration::ServiceConfiguration &authSrv = config.serviceConfiguration(QLatin1String("auth"));
-    if (authSrv.id().isValid()) {
-        if (!credentialsId) {
-            credentialsId = authSrv.value(QString::fromLatin1("CredentialsId")).toUInt();
-        }
-        method = authSrv.value(QLatin1String("method"));
-        mechanism = authSrv.value(QLatin1String("mechanism"));
-        const QMap<QString, QString> values = authSrv.values();
-        for (QMap<QString, QString>::ConstIterator it = values.constBegin();
-             it != values.constEnd(); it++) {
-            const QString prefix = QStringLiteral("%1/%2/").arg(method).arg(mechanism);
-            if (it.key().startsWith(prefix)) {
-                parameters.insert(it.key().mid(prefix.length()), it.value());
-            }
-        }
+    Accounts::Account *account = Accounts::Account::fromId(&m_manager, id().toULongLong(), this);
+    if (!account) {
+        qCWarning(lcMessaging) << "cannot retrieve Account from id:" << id();
+        return false;
+    }
+    const Accounts::ServiceList services = account->services(QStringLiteral("e-mail"));
+    if (!services.count()) {
+        qCWarning(lcMessaging) << "no e-mail service for account " << id();
+        return false;
     }
+    const Accounts::Service srv = services.first();
+    Accounts::AuthData auth = Accounts::AccountService(account, srv).authData();
+    account->deleteLater();
+    QVariantMap parameters = auth.parameters();
     parameters.insert("UserName", svcCfg.value(QStringLiteral("username")));
+    if (auth.method() == QStringLiteral("oauth2")) {
+        parameters.insert("ClientId", loadKey(srv.provider(), srv.name(), "client_id"));
+        parameters.insert("ClientSecret", loadKey(srv.provider(), srv.name(), "client_secret"));
+    }
 
     qCDebug(lcMessaging) << "Creating SSO identity for the service" << service()
-                         << "from account" << id() << "with creds id" << credentialsId;
-    return SSOManager::init(credentialsId, method, mechanism, parameters);
+                         << "from account" << id() << "with creds id" << auth.credentialsId();
+    return SSOManager::init(auth.credentialsId(), auth.method(),
+                            auth.mechanism(), parameters);
+}
+
+bool SSOCredentials::isInvalidated()
+{
+    Accounts::Account *account = Accounts::Account::fromId(&m_manager, id().toULongLong(), this);
+    if (!account) {
+        qWarning() << "cannot retrieve Account from id:" << id();
+        return false;
+    }
+    const Accounts::ServiceList services = account->services(QStringLiteral("e-mail"));
+    if (!services.count()) {
+        qWarning() << "no e-mail service for account " << id();
+        return false;
+    }
+    account->deleteLater();
+    const Accounts::Service srv = services.first();
+    if (srv.isValid()) {
+        account->selectService(srv);
+        return account->value("CredentialsNeedUpdate").toBool();
+    }
+    return false;
+}
+
+void SSOCredentials::invalidate(const QString &source)
+{
+    Accounts::Account *account = Accounts::Account::fromId(&m_manager, id().toULongLong(), this);
+    if (!account) {
+        qCWarning(lcMessaging) << "cannot retrieve Account from id:" << id();
+        return;
+    }
+    const Accounts::ServiceList services = account->services(QStringLiteral("e-mail"));
+    if (!services.count()) {
+        qCWarning(lcMessaging) << "no e-mail service for account " << id();
+        return;
+    }
+    const Accounts::Service srv = services.first();
+    if (srv.isValid()) {
+        qCDebug(lcMessaging) << "Invalidate credentials" << service()
+                             << " from account" << id();
+        account->selectService(srv);
+        account->setValue("CredentialsNeedUpdate", QVariant::fromValue<bool>(true));
+        if (!source.isEmpty()) {
+            account->setValue("CredentialsNeedUpdateFrom", QVariant::fromValue<QString>(source));
+        }
+        account->selectService(Accounts::Service());
+        account->syncAndBlock();
+    }
+    account->deleteLater();
 }
 
 SSOPlugin::SSOPlugin(QObject *parent)
diff --git a/src/plugins/credentials/sso/sso.pro b/src/plugins/credentials/sso/sso.pro
index 9abae1c7..ac8c2902 100644
--- a/src/plugins/credentials/sso/sso.pro
+++ b/src/plugins/credentials/sso/sso.pro
@@ -5,7 +5,7 @@ load(qt_plugin)
 QT = core qmfclient qmfmessageserver
 
 CONFIG += link_pkgconfig
-PKGCONFIG += libsignon-qt5 signon-oauth2plugin
+PKGCONFIG += libsignon-qt5 signon-oauth2plugin accounts-qt5 libsailfishkeyprovider
 
 HEADERS += plugin.h \
            ssomanager.h
diff --git a/src/plugins/plugins.pro b/src/plugins/plugins.pro
index 6c9464c2..a647ade7 100644
--- a/src/plugins/plugins.pro
+++ b/src/plugins/plugins.pro
@@ -11,5 +11,9 @@ exists(/usr/bin/gpgme-config) {
 }
 
 packagesExist(libsignon-qt5) {
+packagesExist(accounts-qt5) {
+packagesExist(libsailfishkeyprovider) {
     SUBDIRS += credentials/sso
 }
+}
+}
diff --git a/src/tools/messageserver/servicehandler.cpp b/src/tools/messageserver/servicehandler.cpp
index 57696b73..f21f41c0 100644
--- a/src/tools/messageserver/servicehandler.cpp
+++ b/src/tools/messageserver/servicehandler.cpp
@@ -702,10 +702,23 @@ void ServiceHandler::onAccountsAdded(const QMailAccountIdList &ids)
 
 void ServiceHandler::onAccountsUpdated(const QMailAccountIdList &ids)
 {
+#ifdef USE_ACCOUNTS_QT
+    QMailAccountIdList idList;
+    foreach (const QMailAccountId &id, ids) {
+        if (!sourceMap.contains(id) && !sinkMap.contains(id)) {
+                idList << id;
+        }
+    }
+    if (!idList.isEmpty()) {
+        registerAccountServices(idList);
+    }
+
+#else
     // Only respond to updates that were generated by other processes
     if (QMailStore::instance()->asynchronousEmission()) {
         reregisterAccountServices(ids, QMailServiceAction::Status::ErrInternalStateReset, tr("Account updated by other process"));
     }
+#endif
 }
 
 void ServiceHandler::onAccountsRemoved(const QMailAccountIdList &ids)
