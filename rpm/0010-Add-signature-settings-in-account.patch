From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Damien Caliste <dcaliste@free.fr>
Date: Mon, 5 Nov 2018 16:11:29 +0100
Subject: [PATCH] Add signature settings in account

---
 src/libraries/qmfclient/qmailaccount.cpp | 48 ++++++++++++++++++++++++
 src/libraries/qmfclient/qmailaccount.h   |  6 +++
 src/libraries/qmfclient/qmailstore_p.cpp | 18 +++++++++
 3 files changed, 72 insertions(+)

diff --git a/src/libraries/qmfclient/qmailaccount.cpp b/src/libraries/qmfclient/qmailaccount.cpp
index 85796363..b477e907 100644
--- a/src/libraries/qmfclient/qmailaccount.cpp
+++ b/src/libraries/qmfclient/qmailaccount.cpp
@@ -61,6 +61,7 @@ static quint64 canCreateFoldersFlag = 0;
 static quint64 useSmartReplyFlag = 0;
 static quint64 canSearchOnServerFlag = 0;
 static quint64 hasPersistentConnectionFlag = 0;
+static quint64 useCryptoSignatureByDefaultFlag = 0;
 
 class QMailAccountPrivate : public QSharedData
 {
@@ -80,6 +81,8 @@ public:
     QMailMessage::MessageType _messageType;
     quint64 _status;
     QString _signature;
+    QStringList _cryptoSignatureIds;
+    QString _cryptoSignatureType;
     QMailTimeStamp _lastSynchronized;
     QMailAddress _address;
     QStringList _sources;
@@ -371,6 +374,7 @@ const quint64 &QMailAccount::CanCreateFolders = canCreateFoldersFlag;
 const quint64 &QMailAccount::UseSmartReply = useSmartReplyFlag;
 const quint64 &QMailAccount::CanSearchOnServer = canSearchOnServerFlag;
 const quint64 &QMailAccount::HasPersistentConnection = hasPersistentConnectionFlag;
+const quint64 &QMailAccount::UseCryptoSignatureByDefault = useCryptoSignatureByDefaultFlag;
 
 /*!
     Creates an uninitialised account object.
@@ -479,6 +483,50 @@ void QMailAccount::setSignature(const QString &str)
     d->_signature = str;
 }
 
+/*!
+    Returns an id list configured for the account. These ids should be used to
+    numericaly sign an outgoing mail of this account.
+
+    \sa setCryptoSignatureIds()
+*/
+QStringList QMailAccount::cryptoSignatureIds() const
+{
+    return d->_cryptoSignatureIds;
+}
+
+/*!
+    Sets the ids configured for the account to \a str. These ids should be used
+    to numericaly sign an outgoing mail of this account.
+
+    \sa cryptoSignatureIds()
+*/
+void QMailAccount::setCryptoSignatureIds(const QStringList &ids)
+{
+    d->_cryptoSignatureIds = ids;
+}
+
+/*!
+    Returns a crypto type configured for the account. This type should be used to
+    numericaly sign an outgoing mail of this account.
+
+    \sa setCryptoSignatureType()
+*/
+QString QMailAccount::cryptoSignatureType() const
+{
+    return d->_cryptoSignatureType;
+}
+
+/*!
+    Sets the crypto type configured for the account to \a str. This type should be used
+    to numericaly sign an outgoing mail of this account.
+
+    \sa cryptoSignatureType()
+*/
+void QMailAccount::setCryptoSignatureType(const QString &type)
+{
+    d->_cryptoSignatureType = type;
+}
+
 /*!
     Returns the time the account was last succesfully synchronized.
     
diff --git a/src/libraries/qmfclient/qmailaccount.h b/src/libraries/qmfclient/qmailaccount.h
index 8ba3efa9..9306dd9c 100644
--- a/src/libraries/qmfclient/qmailaccount.h
+++ b/src/libraries/qmfclient/qmailaccount.h
@@ -77,6 +77,7 @@ public:
     static const quint64 &UseSmartReply;
     static const quint64 &CanSearchOnServer;
     static const quint64 &HasPersistentConnection;
+    static const quint64 &UseCryptoSignatureByDefault;
 
     QMailAccount();
     explicit QMailAccount(const QMailAccountId& id);
@@ -98,6 +99,11 @@ public:
     QString signature() const;
     void setSignature(const QString &str);
 
+    QStringList cryptoSignatureIds() const;
+    void setCryptoSignatureIds(const QStringList &ids);
+    QString cryptoSignatureType() const;
+    void setCryptoSignatureType(const QString &type);
+
     QMailTimeStamp lastSynchronized() const;
     void setLastSynchronized(const QMailTimeStamp &synced);
 
diff --git a/src/libraries/qmfclient/qmailstore_p.cpp b/src/libraries/qmfclient/qmailstore_p.cpp
index 0987c5e0..365ff590 100644
--- a/src/libraries/qmfclient/qmailstore_p.cpp
+++ b/src/libraries/qmfclient/qmailstore_p.cpp
@@ -2671,6 +2671,10 @@ bool SSOAccountSatisfyTheProperty(Accounts::Account* ssoAccount, const QMailAcco
             status &= (~QMailAccount::AppendSignature);
             status |= appendSignature?(QMailAccount::AppendSignature):0;
 
+            bool useCryptoSignature = ssoAccount->valueAsBool(QLatin1String("crypto/signByDefault"));
+            status &= (~QMailAccount::UseCryptoSignatureByDefault);
+            status |= useCryptoSignature?(QMailAccount::UseCryptoSignatureByDefault):0;
+
             bool hasPersistentConnection = ssoAccount->valueAsBool(QLatin1String("hasPersistentConnection"), false);
             status &= (~QMailAccount::HasPersistentConnection);
             status |= hasPersistentConnection?(QMailAccount::HasPersistentConnection):0;
@@ -3237,6 +3241,8 @@ bool QMailStorePrivate::initStore()
                                             63, true, const_cast<quint64 *>(&QMailMessage::HasSignature), t, false)
                 || attemptRegisterStatusBit(QLatin1String("HasEncryption"), QLatin1String("messagestatus"),
                                             63, true, const_cast<quint64 *>(&QMailMessage::HasEncryption), t, false)
+                || attemptRegisterStatusBit(QLatin1String("UseCryptoSignatureByDefault"), QLatin1String("accountstatus"),
+                                            63, true, const_cast<quint64 *>(&QMailAccount::UseCryptoSignatureByDefault), t, false)
                 || attemptRegisterStatusBit(QLatin1String("NoNotification"), QLatin1String("messagestatus"),
                                             63, true, const_cast<quint64 *>(&QMailMessage::NoNotification), t, false)
                 || attemptRegisterStatusBit(QLatin1String("CalendarCancellation"), QLatin1String("messagestatus"),
@@ -3734,17 +3740,21 @@ QMailAccount QMailStorePrivate::extractAccount(const QSharedPointer<Accounts::Ac
     const bool& canTransmit = ssoAccount->valueAsBool(QLatin1String("canTransmit"), true);
     const bool& appendSignature = ssoAccount->valueAsBool(QLatin1String("signatureEnabled"), true);
     const bool& hasPersistentConnection = ssoAccount->valueAsBool(QLatin1String("hasPersistentConnection"), false);
+    const bool& useCryptoSignature = ssoAccount->valueAsBool(QLatin1String("crypto/signByDefault"));
 
     result.setStatus(QMailAccount::Enabled, enabled);
     result.setStatus(QMailAccount::PreferredSender, isDefault);
     result.setStatus(QMailAccount::CanTransmit, canTransmit);
     result.setStatus(QMailAccount::AppendSignature, appendSignature);
     result.setStatus(QMailAccount::HasPersistentConnection, hasPersistentConnection);
+    result.setStatus(QMailAccount::UseCryptoSignatureByDefault, useCryptoSignature);
 
     result.setSignature(ssoAccount->valueAsString(QLatin1String("signature")));
     result.setFromAddress(ssoAccount->contains(QLatin1String("fullName"))
                           ? QMailAddress(ssoAccount->valueAsString(QLatin1String("fullName")), ssoAccount->valueAsString(QLatin1String("emailaddress")))
                           : QMailAddress(ssoAccount->valueAsString(QLatin1String("emailaddress"))));
+    result.setCryptoSignatureType(ssoAccount->valueAsString(QLatin1String("crypto/pluginName")));
+    result.setCryptoSignatureIds(ssoAccount->value(QLatin1String("crypto/keyNames")).toStringList());
 
     if ((static_cast<uint>(ssoAccount->valueAsUInt64(QLatin1String("lastSynchronized")))) == 0) {
         result.setLastSynchronized(QMailTimeStamp());
@@ -6245,7 +6255,11 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptAddAccount(QMailAccou
     ssoAccount->setValue(QLatin1String("signatureEnabled"), appendSignature);
     const bool hasPersistentConnection = (account->status() & QMailAccount::HasPersistentConnection);
     ssoAccount->setValue(QLatin1String("hasPersistentConnection"), hasPersistentConnection);
+    const bool useCryptoSignature = (account->status() & QMailAccount::UseCryptoSignatureByDefault);
+    ssoAccount->setValue(QLatin1String("crypto/signByDefault"), useCryptoSignature);
     ssoAccount->setValue(QLatin1String("signature"), account->signature());
+    ssoAccount->setValue(QLatin1String("crypto/pluginName"), account->cryptoSignatureType());
+    ssoAccount->setValue(QLatin1String("crypto/keyNames"), account->cryptoSignatureIds());
     ssoAccount->setValue(QLatin1String("emailaddress"), account->fromAddress().address());
     ssoAccount->setValue(QLatin1String("fullName"), account->fromAddress().name());
     //Account was never synced
@@ -7048,7 +7062,11 @@ QMailStorePrivate::AttemptResult QMailStorePrivate::attemptUpdateAccount(QMailAc
         ssoAccount->setValue(QLatin1String("signatureEnabled"), signatureEnabled);
         bool hasPersistentConnection = account->status() & QMailAccount::HasPersistentConnection;
         ssoAccount->setValue(QLatin1String("hasPersistentConnection"), hasPersistentConnection);
+        bool useCryptoSignature = account->status() & QMailAccount::UseCryptoSignatureByDefault;
+        ssoAccount->setValue(QLatin1String("crypto/signByDefault"), useCryptoSignature);
         ssoAccount->setValue(QLatin1String("signature"), account->signature());
+        ssoAccount->setValue(QLatin1String("crypto/pluginName"), account->cryptoSignatureType());
+        ssoAccount->setValue(QLatin1String("crypto/keyNames"), account->cryptoSignatureIds());
         ssoAccount->setValue(QLatin1String("emailaddress"), account->fromAddress().address());
         ssoAccount->setValue(QLatin1String("fullName"), account->fromAddress().name());
         if (account->lastSynchronized().isValid()) {
