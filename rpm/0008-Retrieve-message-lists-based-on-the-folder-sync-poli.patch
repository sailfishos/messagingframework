From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: David Llewellyn-Jones <david.llewellyn-jones@jolla.com>
Date: Wed, 8 Jul 2020 15:51:08 +0000
Subject: [PATCH] Retrieve message lists based on the folder sync policy

Uses the folder sync policy extracted from the account and applies it
when downloading messages from different folders.

Also captures the sync policy as part of the QMailAccount structure.
---
 src/libraries/qmfclient/libaccounts_p.cpp     | 40 +++++++++++++++++
 src/libraries/qmfclient/qmailaccount.cpp      | 10 +++++
 src/libraries/qmfclient/qmailaccount.h        | 10 +++++
 .../messageservices/imap/imapservice.cpp      | 21 ++++++---
 .../messageservices/imap/imapstrategy.cpp     | 45 +++++++++++++++++--
 .../messageservices/imap/imapstrategy.h       |  7 +--
 .../messageservices/pop/popservice.cpp        |  7 +++
 7 files changed, 128 insertions(+), 12 deletions(-)

diff --git a/src/libraries/qmfclient/libaccounts_p.cpp b/src/libraries/qmfclient/libaccounts_p.cpp
index 90e9cb1c..6a41c128 100644
--- a/src/libraries/qmfclient/libaccounts_p.cpp
+++ b/src/libraries/qmfclient/libaccounts_p.cpp
@@ -437,6 +437,41 @@ bool AccountSatisfyTheKey(Accounts::Account* account, const QMailAccountKey& key
     return false;
 }
 
+QMailAccount::FolderSyncPolicy folderSyncPolicyToEnum(const QString &policy)
+{
+    QMailAccount::FolderSyncPolicy result = QMailAccount::SyncInboxOnly;
+    if (policy == QStringLiteral("follow-flags")) {
+        result = QMailAccount::SyncSelectedFolders;
+    } else if (policy == QStringLiteral("inbox-and-subfolders")) {
+        result = QMailAccount::SyncInboxAndSubfolders;
+    } else if (policy == QStringLiteral("ignore-flags")) {
+        result = QMailAccount::SyncEverything;
+    }
+
+    return result;
+}
+
+QString const folderSyncPolicyToString(QMailAccount::FolderSyncPolicy policy)
+{
+    QString folderSyncPolicy;
+    switch (policy) {
+    case QMailAccount::SyncInboxAndSubfolders:
+        folderSyncPolicy = QStringLiteral("inbox-and-subfolders");
+        break;
+    case QMailAccount::SyncEverything:
+        folderSyncPolicy = QStringLiteral("ignore-flags");
+        break;
+    case QMailAccount::SyncSelectedFolders:
+        folderSyncPolicy = QStringLiteral("follow-flags");
+        break;
+    default:
+        folderSyncPolicy = QStringLiteral("inbox-only");
+        break;
+    }
+
+    return folderSyncPolicy;
+}
+
 }
 
 static QSharedPointer<Accounts::Manager> managerInstance;
@@ -488,6 +523,7 @@ QMailAccount LibAccountManager::account(const QMailAccountId &id) const
 
     account->selectService();
     const bool enabled = account->enabled();
+    result.setFolderSyncPolicy(folderSyncPolicyToEnum(account->valueAsString(QLatin1String("folderSyncPolicy"))));
 
     account->selectService(service);
     QString name = account->valueAsString(QLatin1String("email/email_box_name"));
@@ -659,6 +695,9 @@ bool LibAccountManager::addAccount(QMailAccount *account,
     sharedAccount->setDisplayName(account->name());
     sharedAccount->setEnabled(account->status() & QMailAccount::Enabled);
 
+    sharedAccount->selectService();
+    sharedAccount->setValue(QLatin1String("folderSyncPolicy"), folderSyncPolicyToString(account->folderSyncPolicy()));
+
     Accounts::ServiceList services = sharedAccount->services(QLatin1String("e-mail"));
     if (!services.count()) {
         qCWarning(lcMessaging) << "E-mail Services not found, make sure that *.service and *.provider files are properly installed.";
@@ -852,6 +891,7 @@ bool LibAccountManager::updateSharedAccount(QMailAccount *account,
         } else {
             sharedAccount->setDisplayName(account->name());
         }
+        sharedAccount->setValue(QLatin1String("folderSyncPolicy"), folderSyncPolicyToString(account->folderSyncPolicy()));
         sharedAccount->setEnabled(account->status() & QMailAccount::Enabled);
         sharedAccount->selectService(service);
         sharedAccount->setValue(QLatin1String("type"), static_cast<int>(account->messageType()));
diff --git a/src/libraries/qmfclient/qmailaccount.cpp b/src/libraries/qmfclient/qmailaccount.cpp
index 74117b8e..7792198d 100644
--- a/src/libraries/qmfclient/qmailaccount.cpp
+++ b/src/libraries/qmfclient/qmailaccount.cpp
@@ -86,6 +86,7 @@ public:
     QStringList _sinks;
     QMap<QMailFolder::StandardFolder, QMailFolderId> _standardFolders;
     QString _iconPath;
+    QMailAccount::FolderSyncPolicy _folderSyncPolicy;
 
     QMap<QString, QString> _customFields;
     bool _customFieldsModified;
@@ -732,3 +733,12 @@ void QMailAccount::addMessageSink(const QString &sink)
     d->_sinks.append(sink);
 }
 
+QMailAccount::FolderSyncPolicy QMailAccount::folderSyncPolicy() const
+{
+    return d->_folderSyncPolicy;
+}
+
+void QMailAccount::setFolderSyncPolicy(QMailAccount::FolderSyncPolicy policy)
+{
+    d->_folderSyncPolicy = policy;
+}
diff --git a/src/libraries/qmfclient/qmailaccount.h b/src/libraries/qmfclient/qmailaccount.h
index 8b3333e6..15883b8d 100644
--- a/src/libraries/qmfclient/qmailaccount.h
+++ b/src/libraries/qmfclient/qmailaccount.h
@@ -79,6 +79,13 @@ public:
     static const quint64 &CanSearchOnServer;
     static const quint64 &HasPersistentConnection;
 
+    enum FolderSyncPolicy {
+        SyncSelectedFolders,
+        SyncInboxOnly,
+        SyncInboxAndSubfolders,
+        SyncEverything
+    };
+
     QMailAccount();
     explicit QMailAccount(const QMailAccountId& id);
     QMailAccount(const QMailAccount& other);
@@ -116,6 +123,9 @@ public:
 
     const QMap<QMailFolder::StandardFolder, QMailFolderId> &standardFolders() const;
 
+    FolderSyncPolicy folderSyncPolicy() const;
+    void setFolderSyncPolicy(FolderSyncPolicy policy);
+
     quint64 status() const;
     void setStatus(quint64 newStatus);
     void setStatus(quint64 mask, bool set);
diff --git a/src/plugins/messageservices/imap/imapservice.cpp b/src/plugins/messageservices/imap/imapservice.cpp
index d56e29b0..c84b676c 100644
--- a/src/plugins/messageservices/imap/imapservice.cpp
+++ b/src/plugins/messageservices/imap/imapservice.cpp
@@ -218,7 +218,7 @@ bool ImapService::Source::retrieveFolderList(const QMailAccountId &accountId, co
     _service->_client->strategyContext()->foldersOnlyStrategy.setBase(folderId);
     _service->_client->strategyContext()->foldersOnlyStrategy.setQuickList(!folderId.isValid());
     _service->_client->strategyContext()->foldersOnlyStrategy.setDescending(descending);
-    _service->_client->strategyContext()->foldersOnlyStrategy.setIgnoreSyncFlag(true);
+    _service->_client->strategyContext()->foldersOnlyStrategy.setFolderSyncPolicy(QMailAccount::SyncEverything);
     appendStrategy(&_service->_client->strategyContext()->foldersOnlyStrategy);
     if (!_unavailable)
         return initiateStrategy();
@@ -247,10 +247,10 @@ bool ImapService::Source::retrieveMessageList(const QMailAccountId &accountId, c
 {
     Q_ASSERT(!_unavailable);
     if (folderId.isValid()) {
-        return retrieveMessageLists(accountId, QMailFolderIdList() << folderId, minimum, sort, true /* Full check */);
+        return retrieveMessageLists(accountId, QMailFolderIdList() << folderId, minimum, sort, true /* accountCheck */);
     }
 
-    return retrieveMessageLists(accountId, QMailFolderIdList(), minimum, sort, true /* Full check */);
+    return retrieveMessageLists(accountId, QMailFolderIdList(), minimum, sort, true /* accountCheck */);
 }
 
 bool ImapService::Source::retrieveNewMessages(const QMailAccountId &accountId, const QMailFolderIdList &folderIds)
@@ -291,6 +291,9 @@ bool ImapService::Source::retrieveMessageLists(const QMailAccountId &accountId,
         qCWarning(lcIMAP) << "IMAP Search sorting not yet implemented!";
     }
 
+    QMailAccount account(accountId);
+    QMailAccount::FolderSyncPolicy folderSyncPolicy = account.folderSyncPolicy();
+
     QMailFolderIdList folderIds;
     uint adjustedMinimum = minimum ? minimum : INT_MAX; // zero means retrieve all mail
     _service->_client->strategyContext()->retrieveMessageListStrategy.clearSelection();
@@ -310,7 +313,7 @@ bool ImapService::Source::retrieveMessageLists(const QMailAccountId &accountId,
 
     _service->_client->strategyContext()->retrieveMessageListStrategy.setOperation(_service->_client->strategyContext(), QMailRetrievalAction::Auto);
     _service->_client->strategyContext()->retrieveMessageListStrategy.selectedFoldersAppend(folderIds);
-    _service->_client->strategyContext()->retrieveMessageListStrategy.setIgnoreSyncFlag(!_folderIds.isEmpty());
+    _service->_client->strategyContext()->retrieveMessageListStrategy.setFolderSyncPolicy(_folderIds.isEmpty() ? folderSyncPolicy : QMailAccount::SyncEverything);
     appendStrategy(&_service->_client->strategyContext()->retrieveMessageListStrategy);
     if (!_unavailable)
         return initiateStrategy();
@@ -498,12 +501,15 @@ bool ImapService::Source::retrieveAll(const QMailAccountId &accountId)
         return false;
     }
 
+    QMailAccount account(accountId);
+    QMailAccount::FolderSyncPolicy folderSyncPolicy = account.folderSyncPolicy();
+
     _service->_client->strategyContext()->retrieveAllStrategy.clearSelection();
     _service->_client->strategyContext()->retrieveAllStrategy.setBase(QMailFolderId());
     _service->_client->strategyContext()->retrieveAllStrategy.setQuickList(false);
     _service->_client->strategyContext()->retrieveAllStrategy.setDescending(true);
     _service->_client->strategyContext()->retrieveAllStrategy.setOperation(_service->_client->strategyContext(), QMailRetrievalAction::Auto);
-    _service->_client->strategyContext()->retrieveAllStrategy.setIgnoreSyncFlag(false);
+    _service->_client->strategyContext()->retrieveAllStrategy.setFolderSyncPolicy(folderSyncPolicy);
     appendStrategy(&_service->_client->strategyContext()->retrieveAllStrategy);
     if (!_unavailable)
         return initiateStrategy();
@@ -572,6 +578,9 @@ bool ImapService::Source::synchronize(const QMailAccountId &accountId)
         return false;
     }
 
+    QMailAccount account(accountId);
+    QMailAccount::FolderSyncPolicy folderSyncPolicy = account.folderSyncPolicy();
+
     queueDisconnectedOperations(accountId);
 
     _service->_client->strategyContext()->synchronizeAccountStrategy.clearSelection();
@@ -579,7 +588,7 @@ bool ImapService::Source::synchronize(const QMailAccountId &accountId)
     _service->_client->strategyContext()->synchronizeAccountStrategy.setQuickList(false);
     _service->_client->strategyContext()->synchronizeAccountStrategy.setDescending(true);
     _service->_client->strategyContext()->synchronizeAccountStrategy.setOperation(_service->_client->strategyContext(), QMailRetrievalAction::Auto);
-    _service->_client->strategyContext()->synchronizeAccountStrategy.setIgnoreSyncFlag(false);
+    _service->_client->strategyContext()->synchronizeAccountStrategy.setFolderSyncPolicy(folderSyncPolicy);
     appendStrategy(&_service->_client->strategyContext()->synchronizeAccountStrategy);
     if (!_unavailable)
         return initiateStrategy();
diff --git a/src/plugins/messageservices/imap/imapstrategy.cpp b/src/plugins/messageservices/imap/imapstrategy.cpp
index af8a8018..3e1df7c8 100644
--- a/src/plugins/messageservices/imap/imapstrategy.cpp
+++ b/src/plugins/messageservices/imap/imapstrategy.cpp
@@ -2372,14 +2372,53 @@ void ImapSynchronizeBaseStrategy::previewDiscoveredMessages(ImapStrategyContextB
     }
 }
 
-void ImapSynchronizeBaseStrategy::setIgnoreSyncFlag(bool ignoreSyncFlag)
+void ImapSynchronizeBaseStrategy::setFolderSyncPolicy(QMailAccount::FolderSyncPolicy policy)
 {
-    _ignoreSyncFlag = ignoreSyncFlag;
+    _folderSyncPolicy = policy;
 }
 
 bool ImapSynchronizeBaseStrategy::synchronizationEnabled(const QMailFolder &folder) const
 {
-    return _ignoreSyncFlag || (folder.status() & QMailFolder::SynchronizationEnabled);
+    bool result = true;
+
+    QMailFolderId inbox;
+    if ((_folderSyncPolicy == QMailAccount::SyncInboxOnly) || (_folderSyncPolicy == QMailAccount::SyncInboxAndSubfolders)) {
+        // Find the inbox if we're going to need it
+        inbox = QMailAccount(folder.parentAccountId()).standardFolder(QMailFolder::InboxFolder);
+    }
+
+    switch (_folderSyncPolicy) {
+    default:
+    case QMailAccount::SyncSelectedFolders:
+        result = (folder.status() & QMailFolder::SynchronizationEnabled) != 0;
+        break;
+    case QMailAccount::SyncInboxOnly:
+        result = (folder.id() == inbox);
+        break;
+    case QMailAccount::SyncInboxAndSubfolders: {
+            QMailFolder check = folder;
+            result = false;
+            while (!result && check.id().isValid()) {
+                if (check.id() == inbox) {
+                    result = true;
+                }
+                else {
+                    if (check.parentFolderId().isValid()) {
+                        check = QMailFolder(check.parentFolderId());
+                    }
+                    else {
+                        check = QMailFolder();
+                    }
+                }
+            }
+        }
+        break;
+    case QMailAccount::SyncEverything:
+        // Do nothing;
+        break;
+    }
+
+    return result;
 }
 
 bool ImapSynchronizeBaseStrategy::nextFolder()
diff --git a/src/plugins/messageservices/imap/imapstrategy.h b/src/plugins/messageservices/imap/imapstrategy.h
index 832a6883..25aac3c5 100644
--- a/src/plugins/messageservices/imap/imapstrategy.h
+++ b/src/plugins/messageservices/imap/imapstrategy.h
@@ -42,6 +42,7 @@
 #include <QList>
 #include <QMap>
 
+#include <qmailaccount.h>
 #include <qmailfolder.h>
 #include <qmailmessagebuffer.h>
 
@@ -458,14 +459,14 @@ private:
 class ImapSynchronizeBaseStrategy : public ImapFolderListStrategy
 {
 public:
-    ImapSynchronizeBaseStrategy() : _ignoreSyncFlag(false) {}
+    ImapSynchronizeBaseStrategy() : _folderSyncPolicy(QMailAccount::SyncSelectedFolders) {}
     virtual ~ImapSynchronizeBaseStrategy() {}
 
     void newConnection(ImapStrategyContextBase *context) override;
 
     bool messageFetched(ImapStrategyContextBase *context, QMailMessage &message) override;
     void messageFlushed(ImapStrategyContextBase *context, QMailMessage &message) override;
-    virtual void setIgnoreSyncFlag(bool ignoreSyncFlag);
+    virtual void setFolderSyncPolicy(QMailAccount::FolderSyncPolicy policy);
 
 protected:
     void handleLogin(ImapStrategyContextBase *context) override;
@@ -491,7 +492,7 @@ protected:
     int _outstandingPreviews;
 
 private:
-    bool _ignoreSyncFlag;
+    QMailAccount::FolderSyncPolicy _folderSyncPolicy;
     uint _progress;
     uint _total;
 };
diff --git a/src/plugins/messageservices/pop/popservice.cpp b/src/plugins/messageservices/pop/popservice.cpp
index 7f112659..5a598ff0 100644
--- a/src/plugins/messageservices/pop/popservice.cpp
+++ b/src/plugins/messageservices/pop/popservice.cpp
@@ -103,6 +103,7 @@ private:
     bool _unavailable;
     bool _mailCheckQueued;
     bool _queuedMailCheckInProgress;
+    QMailAccount::FolderSyncPolicy _folderSyncPolicy;
     QTimer _intervalTimer;
 };
 
@@ -145,6 +146,9 @@ bool PopService::Source::retrieveMessageList(const QMailAccountId &accountId, co
         return false;
     }
 
+    QMailAccount account(accountId);
+    _folderSyncPolicy = account.folderSyncPolicy();
+
     QMailMessageKey countKey(QMailMessageKey::parentAccountId(accountId));
     countKey &= ~QMailMessageKey::status(QMailMessage::Temporary);
     uint existing = QMailStore::instance()->countMessages(countKey);
@@ -201,6 +205,9 @@ bool PopService::Source::retrieveAll(const QMailAccountId &accountId)
         return false;
     }
 
+    QMailAccount account(accountId);
+    _folderSyncPolicy = account.folderSyncPolicy();
+
     _service->_client.setOperation(QMailRetrievalAction::MetaData);
     _service->_client.newConnection();
     _unavailable = true;
